package com.jimo.algo;

import org.junit.Test;

import java.util.Arrays;
import java.util.List;

import static org.junit.Assert.*;

public class SolutionTest {

	Solution s = new Solution();

	@Test
	public void test() {

		int[] re = s.prisonAfterNDays(new int[]{0, 1, 0, 1, 1, 0, 0, 1}, 7);
		for (int i : re) {
			System.out.print(i + " ");
		}
	}

	@Test
	public void reverseString() {
		assertEquals("54321", s.reverseString("12345"));
	}

	@Test
	public void reverse() {
		assertEquals(123, s.reverse(321));
		assertEquals(-123, s.reverse(-321));
		assertEquals(-12, s.reverse(-210));
//		Integer.MIN_VALUE;
		assertEquals(0, s.reverse(1534236469));

		System.out.println(Integer.MAX_VALUE + 1);
	}

	@Test
	public void merge() {
		int[] n1 = {1, 2, 3, 0, 0, 0};
		int[] n2 = {2, 5, 6};
		s.merge(n1, 3, n2, 3);
		for (int i : n1) {
			System.out.print(i + " ");
		}
	}

	@Test
	public void fizzBuzz() {
		List<String> list = s.fizzBuzz(15);
		list.forEach(System.out::println);
	}

	@Test
	public void hammingWeight() {
		int c = s.hammingWeight(-3);
		assertEquals(31, c);
	}

	@Test
	public void hammingDistance() {
		int c = s.hammingDistance(4, 2);
		assertEquals(2, c);
	}

	@Test
	public void maxProfit() {
		assertEquals(7, s.maxProfit(new int[]{7, 1, 5, 3, 6, 4}));
		assertEquals(4, s.maxProfit(new int[]{1, 2, 3, 4, 5}));
		assertEquals(0, s.maxProfit(new int[]{7, 6, 4, 3, 1}));
	}

	@Test
	public void rotate() {
		int[] n = {1, 2, 3, 4, 5, 6, 7};
		s.rotate(n, 3);
		for (int i : n) {
			System.out.print(i + " ");
		}
		s.rotate(n, 7);
		for (int i : n) {
			System.out.print(i + " ");
		}
	}

	@Test
	public void intersect() {
		int[] n = s.intersect(new int[]{1, 2, 2, 1}, new int[]{2, 2});
		for (int i : n) {
			System.out.print(i + " ");
		}
	}

	@Test
	public void plusOne() {
		for (int i : s.plusOne(new int[]{9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
				9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
				9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9})) {
			System.out.print(i + " ");
		}
	}

	@Test
	public void firstUniqChar() {
		assertEquals(8, s.firstUniqChar("dddccdbba"));
		assertEquals(0, s.firstUniqChar("leetcode"));
		assertEquals(2, s.firstUniqChar("loveleetcode"));
	}

	@Test
	public void isPalindrome() {
		assertTrue(s.isPalindrome("A man, a plan, a canal: Panama"));
		assertFalse(s.isPalindrome("race a car"));
	}

	@Test
	public void rob() {
		assertEquals(1, s.rob(new int[]{1}));
		assertEquals(4, s.rob(new int[]{1, 2, 3, 1}));
		assertEquals(12, s.rob(new int[]{2, 7, 9, 3, 1}));
		assertEquals(4, s.rob(new int[]{2, 1, 1, 2}));
	}

	@Test
	public void isPowerOfThree() {
		assertTrue(s.isPowerOfThree(27));
		assertTrue(s.isPowerOfThree(9));
		assertTrue(s.isPowerOfThree(1));
		assertFalse(s.isPowerOfThree(45));
		assertFalse(s.isPowerOfThree(0));
		assertFalse(s.isPowerOfThree(2147483647));
	}

	@Test
	public void reverseBits() {
		assertEquals(964176192, s.reverseBits(43261596));
		assertEquals(-1073741825, s.reverseBits(-3));
	}

	@Test
	public void rotate2() {
		int[][] m = {
				{5, 1, 9, 11}, {2, 4, 8, 10}, {13, 3, 6, 7}, {15, 14, 12, 16}
		};
		s.rotate(m);
	}

	@Test
	public void myAtoi() {
		assertEquals(43, s.myAtoi("43"));
		assertEquals(-42, s.myAtoi("   -42"));
		assertEquals(4193, s.myAtoi("4193 with words"));
		assertEquals(0, s.myAtoi("words and 987"));
		assertEquals(-2147483648, s.myAtoi("-91283472332"));
		assertEquals(-2147483648, s.myAtoi("-2147483648"));
		assertEquals(2147483647, s.myAtoi("2147483648"));
		assertEquals(2147483647, s.myAtoi("2147483649"));
		assertEquals(3, s.myAtoi("3.14"));
		assertEquals(0, s.myAtoi("+"));
		assertEquals(12345678, s.myAtoi("  0000000000012345678"));
		assertEquals(0, s.myAtoi("  000000000"));
	}

	@Test
	public void countAndSay() {
		assertEquals("1", s.countAndSay(1));
		assertEquals("11", s.countAndSay(2));
		assertEquals("21", s.countAndSay(3));
		assertEquals("1211", s.countAndSay(4));
		assertEquals("111221", s.countAndSay(5));
		assertEquals("312211", s.countAndSay(6));
		assertEquals("13112221", s.countAndSay(7));
		assertEquals("31131122211311123113321112131221123113111231121113311211131221121321131211132221123113" +
				"11221112131221123113112221121113311211131122211211131221131211132221121321132132212321121113121112133" +
				"221123113112221131112212211131221121321131211132221123113112221131112311332211211133112111311222112111" +
				"312211311123113322112111312211312111322212321121113121112133221121321132132211331121321132213211231132" +
				"132211211131221232112111312212221121123222112311311222113111231133211121321321122111312211312111322211" +
				"2132113213221232112111312111213322112311311222113111231133211121312211231131112311211232221121113311211" +
				"131122211211131221131112311332211211131221131211132211121312211231131112311211232221121113122113121113" +
				"222123211211131211121311121321123113213221121113122123211211131221222112112322211213211321322113311213" +
				"2123123112111311222112132113213221132213211321322112311311222113311213212322211211131221131211221321123" +
				"1132132211211131221131211322113321132211221121332211231131122211311123113321112131221123113111231121113" +
				"3112111312211213211312111322211231131122111213122112311311222112111331121113112221121113122113121113222" +
				"1121321132122311211131122211213211321322113312221131122112211131221131211132221232112111312111213111213" +
				"2112311321322112111312212321121113122122211211232221121321132132211331121321231231121113112221121321132" +
				"1322113221321132132211231131122211331121321232221121113122113121122132112311321322112111312211312113221" +
				"1332113221122112133221121321132132211331121321231231121113112221121321133112132112312321123113112221121" +
				"1131221131112311332211213211321223112111311222112132113213221123123211231132132211231131122211311123113" +
				"3221121113122113121113221112131221123113111231121123222112132113213221133122112231131122211211131221131" +
				"1123113322112132113213221133122211332111213112221133211322112211213322112311311222113111231133211121312" +
				"2112311311123112111331121113122112132113121113222112311311221112131221123113112221121113311211131122211" +
				"2111312211312111322211213211321322123211211131211121332211231131122211311123113321112131221123113111231" +
				"1211232221132231131122211311123113321112131221123113111231121123222112111312211312111322212321121113122" +
				"1132211131221121321131211132221123113112211121312211231131122113221122112133221121321132132211331121321" +
				"2312311211131211131221223113112221131112311332211211131221131211132211121312211231131112311211232221121" +
				"32113213221133112132123123112111312211322311211133112111312211213211311123113223112111321322123122113222" +
				"12221121123222112111312211312111322212321121113121112131112132112311321322112111312212321121113122112131" +
				"11213122112132113213221123113112221133112132123222112111312211312112213211231132132211211131221131211132" +
				"22112131112131221121321131211132221121321132132211331121321232221123113112221131112311322311211131122211" +
				"21321133112132112211213322112111312211312111322212311222122132113213221123113112221133112132123222112111" +
				"312211312111322212321121113121112133221121311121312211213211312111322211213211321322123211211131211121332" +
				"21121321132132211331121321231231121113112221121321133112132112211213322112311311222113111231133211121312" +
				"2112311311222113223113112221121113122113111231133221121321132122311211131122211213211321222113222122211" +
				"2112322211211131221131211132221232112111312111213111213211231131112311311221122132113213221133112132123" +
				"2221123113112221131112311322311211131122211213211331121321122112133221121113122113121113222123211211131" +
				"2111213111213211231132132211211131221232112111312212221121123222112131112131221121321131211132221121321" +
				"1321322123211211131211121332211213211321322113311213211322132112311321322112111312212321121113122122211" +
				"2112322211213211321322113311213212312311211131122211213211331121321123123211231131122211211131221131112" +
				"3113322112132113212231121113112221121321132122211322212221121123222112311311222113111231133211121312211" +
				"2311311123112111331121113122112132113121113222112311311221112131221123113112221121113311211131122211211" +
				"1312211312111322211213211321322123211211131211121332211231131122211311123113321112132132112211131221131" +
				"2111322211213211321322123211211131211121332211213211321322113311213212312311211131221132231121113311211" +
				"1312212221121123222112132113213221133112132123222113223113112221131112311332111213122112311311123112112" +
				"3222112111312211312111322212321121113121112131112132112311321322112111312211312112213211231132132211231" +
				"1311222113111221132221232221123113112221132211131221131211132221121321132132211331121321133112111312212" +
				"2211211132213211231131122212322211331222113112211", s.countAndSay(30));
	}
}

